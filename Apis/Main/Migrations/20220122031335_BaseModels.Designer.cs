// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UnitPlanner.Apis.Main.Data;

#nullable disable

namespace UnitPlanner.Apis.Main.Migrations
{
    [DbContext(typeof(UnitPlannerDbContext))]
    [Migration("20220122031335_BaseModels")]
    partial class BaseModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AccountDomain", b =>
                {
                    b.Property<string>("Domain")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Domain");

                    b.HasIndex("UnitId");

                    b.ToTable("AccountDomain");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AccountOrganizationMapping", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ORGID")
                        .HasColumnType("int");

                    b.Property<string>("CAPGroupId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CAPSquadronId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CAPWingId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("AccountId", "ORGID");

                    b.HasIndex("CAPGroupId");

                    b.HasIndex("CAPSquadronId");

                    b.HasIndex("CAPWingId");

                    b.HasIndex("ORGID");

                    b.ToTable("AccountOrganizationMapping");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AttendanceApproval", b =>
                {
                    b.Property<Guid>("AttendanceApprovalRequirementId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AttendanceRecordEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AttendanceRecordMemberId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SignOffDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("SignatureId")
                        .HasColumnType("char(36)");

                    b.HasKey("AttendanceApprovalRequirementId", "AttendanceRecordEventId", "AttendanceRecordMemberId");

                    b.HasIndex("SignatureId");

                    b.HasIndex("AttendanceRecordEventId", "AttendanceRecordMemberId");

                    b.ToTable("AttendanceApproval");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AttendanceApprovalRequirement", b =>
                {
                    b.Property<Guid>("AttendanceApprovalRequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ApprovalLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CalendarEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PreviousApprovalRequirementAttendanceApprovalRequirementId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("RegularCalendarEventId")
                        .HasColumnType("char(36)");

                    b.HasKey("AttendanceApprovalRequirementId");

                    b.HasIndex("CalendarEventId");

                    b.HasIndex("PreviousApprovalRequirementAttendanceApprovalRequirementId");

                    b.HasIndex("RegularCalendarEventId");

                    b.ToTable("AttendanceApprovalRequirement");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AttendanceRecord", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ParticipationFeePaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PlanToUseProvidedTransportation")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("SummaryEmailSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("EventId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("Attendance", (string)null);
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CalendarEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuthorMemberId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("MeetDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PickupDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorMemberId");

                    b.HasIndex("CalendarId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceField", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("AllowMemberToModify")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DisplayToMember")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("LinkedEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("RegularCalendarEventId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EventId", "Title");

                    b.HasIndex("LinkedEventId");

                    b.HasIndex("RegularCalendarEventId");

                    b.ToTable("CustomAttendanceField");

                    b.HasDiscriminator<string>("Type").HasValue("CustomAttendanceField");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldFileSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CustomAttendanceFieldFilesValueAttendanceRecordEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CustomAttendanceFieldFilesValueAttendanceRecordMemberId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CustomAttendanceFieldFilesValueTitle")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("FileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CustomAttendanceFieldFilesValueAttendanceRecordEventId", "CustomAttendanceFieldFilesValueAttendanceRecordMemberId", "CustomAttendanceFieldFilesValueTitle");

                    b.ToTable("CustomAttendanceFieldFileSubmission");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldValue", b =>
                {
                    b.Property<Guid>("AttendanceRecordEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AttendanceRecordMemberId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AttendanceRecordEventId", "AttendanceRecordMemberId", "Title");

                    b.HasIndex("AttendanceRecordEventId", "Title");

                    b.ToTable("CustomAttendanceFieldValue");

                    b.HasDiscriminator<string>("Type").HasValue("CustomAttendanceFieldValue");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.DebriefItem", b =>
                {
                    b.Property<Guid>("DebriefItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DebriefText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("DisplayToPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SourceEventId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Submitted")
                        .HasColumnType("datetime(6)");

                    b.HasKey("DebriefItemId");

                    b.HasIndex("MemberId");

                    b.HasIndex("SourceEventId");

                    b.ToTable("DebriefItem");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Equipment", b =>
                {
                    b.Property<Guid>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("LinkedEventId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("RegularCalendarEventId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EquipmentId");

                    b.HasIndex("LinkedEventId");

                    b.HasIndex("RegularCalendarEventId");

                    b.ToTable("Equipment");

                    b.HasDiscriminator<string>("Type").HasValue("Equipment");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.ExtraAccountMembership", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.HasKey("AccountId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("ExtraAccountMembership");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Member", b =>
                {
                    b.Property<Guid>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("MemberId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.CadetAchv", b =>
                {
                    b.Property<int>("CAPID")
                        .HasColumnType("int");

                    b.Property<int>("CadetAchvID")
                        .HasColumnType("int");

                    b.Property<string>("AEBookValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AEDateP")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AEMod")
                        .HasColumnType("int");

                    b.Property<int>("AEScore")
                        .HasColumnType("int");

                    b.Property<int>("AETest")
                        .HasColumnType("int");

                    b.Property<bool>("ActivePart")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CadetHFZInformationHFZID")
                        .HasColumnType("int");

                    b.Property<bool>("CadetOath")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateMod")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DrillDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DrillScore")
                        .HasColumnType("int");

                    b.Property<string>("FirstUsr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LeadCurr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LeadLabDateP")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LeadLabScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("LeadershipEssayDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("MoralLDateP")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("OralPresentationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("OtherReq")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("PhyFitTest")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SDAReport")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("SpeechDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StaffServicesDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TechnicalWritingAssignment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TechnicalWritingAssignmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UsrID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CAPID", "CadetAchvID");

                    b.HasIndex("CadetHFZInformationHFZID");

                    b.HasIndex("MemberId");

                    b.ToTable("NHQ_CadetAchv");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.CadetAchvAprs", b =>
                {
                    b.Property<int>("CAPID")
                        .HasColumnType("int");

                    b.Property<int>("CadetAchvID")
                        .HasColumnType("int");

                    b.Property<int>("AprCAPID")
                        .HasColumnType("int");

                    b.Property<int>("AwardNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateMod")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DspReason")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("FirstUsr")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<bool>("JROTCWaiver")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("PrintedCert")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("UsrID")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("CAPID", "CadetAchvID");

                    b.HasIndex("MemberId");

                    b.ToTable("NHQ_CadetAchvAprs");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.CadetActivities", b =>
                {
                    b.Property<int>("CAPID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Completed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateMod")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("CAPID", "Completed");

                    b.HasIndex("MemberId");

                    b.ToTable("NHQ_CadetActivities");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.CadetDutyPosition", b =>
                {
                    b.Property<int>("CAPID")
                        .HasColumnType("int");

                    b.Property<string>("Duty")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ORGID")
                        .HasColumnType("int");

                    b.Property<int>("Asst")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateMod")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FunctArea")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lvl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CAPID", "Duty", "ORGID", "Asst");

                    b.HasIndex("MemberId");

                    b.HasIndex("ORGID");

                    b.ToTable("NHQ_CadetDutyPosition");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.CadetHFZInformation", b =>
                {
                    b.Property<int>("HFZID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CAPID")
                        .HasColumnType("int");

                    b.Property<string>("CurlUp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CurlUpPassed")
                        .HasColumnType("int");

                    b.Property<int>("CurlUpWaiver")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTaken")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IsPassed")
                        .HasColumnType("int");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MileRun")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MileRunPassed")
                        .HasColumnType("int");

                    b.Property<int>("MileRunWaiver")
                        .HasColumnType("int");

                    b.Property<int>("ORGID")
                        .HasColumnType("int");

                    b.Property<string>("PacerRun")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PacerRunPassed")
                        .HasColumnType("int");

                    b.Property<int>("PacerRunWaiver")
                        .HasColumnType("int");

                    b.Property<string>("PushUp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PushUpPassed")
                        .HasColumnType("int");

                    b.Property<int>("PushUpWaiver")
                        .HasColumnType("int");

                    b.Property<string>("SitAndReach")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SitAndReachPassed")
                        .HasColumnType("int");

                    b.Property<int>("SitAndReachWaiver")
                        .HasColumnType("int");

                    b.Property<int>("WeatherWaiver")
                        .HasColumnType("int");

                    b.HasKey("HFZID");

                    b.HasIndex("MemberId");

                    b.HasIndex("ORGID");

                    b.ToTable("NHQ_CadetHFZInformation");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.CdtAchvEnum", b =>
                {
                    b.Property<int>("CadetAchvID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AchvName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CurAwdNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateMod")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstUsr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UsrID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CadetAchvID");

                    b.ToTable("NHQ_CdtAchvEnum");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.DutyPosition", b =>
                {
                    b.Property<int>("CAPID")
                        .HasColumnType("int");

                    b.Property<string>("Duty")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ORGID")
                        .HasColumnType("int");

                    b.Property<int>("Asst")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateMod")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FunctArea")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lvl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CAPID", "Duty", "ORGID", "Asst");

                    b.HasIndex("MemberId");

                    b.HasIndex("ORGID");

                    b.ToTable("NHQ_DutyPosition");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.MbrContact", b =>
                {
                    b.Property<int>("CAPID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Priority")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateMod")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DoNotContact")
                        .HasColumnType("int");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CAPID", "Type", "Priority");

                    b.HasIndex("MemberId");

                    b.ToTable("NHQ_MbrContact");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.OFlight", b =>
                {
                    b.Property<int>("CAPID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FltDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AcftTailNum")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FltRlsNum")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("FltTime")
                        .HasColumnType("double");

                    b.Property<DateTime>("LstDateMod")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LstUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Syllabus")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Wing")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CAPID", "FltDate");

                    b.HasIndex("MemberId");

                    b.ToTable("NHQ_OFlight");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.Organization", b =>
                {
                    b.Property<int>("ORGID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateChartered")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateMod")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstUsr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("NextLevel")
                        .HasColumnType("int");

                    b.Property<string>("OrgNotes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UsrID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Wing")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ORGID");

                    b.HasIndex("NextLevel");

                    b.ToTable("NHQ_Organization");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("NotificationDataId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Read")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("NotificationDataId");

                    b.ToTable("Notifications");

                    b.HasDiscriminator<string>("Type").HasValue("Notification");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NotificationData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("NotificationData");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.PointOfContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CalendarEventId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("DisplayPublicly")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ReceiveEventUpdates")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ReceiveRoster")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ReceiveSignUpUpdates")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEventId");

                    b.ToTable("PointsOfContact");

                    b.HasDiscriminator<string>("Type").HasValue("PointOfContact");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Signature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Signature");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.TeamMembership", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsLeadershipRole")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MemberId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMembership");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AdminNotification", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.Notification");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasIndex("AccountId");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CAPActivity", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.Account");

                    b.Property<string>("CAPGroupId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CAPWingId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasIndex("CAPGroupId");

                    b.HasIndex("CAPWingId");

                    b.HasIndex("HostId");

                    b.ToTable("CAPActivityAccounts");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CAPGroup", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.Account");

                    b.Property<string>("WingId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasIndex("WingId");

                    b.ToTable("CAPGroups");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CAPSquadron", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.Account");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WingId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasIndex("GroupId");

                    b.HasIndex("WingId");

                    b.ToTable("CAPSquadrons");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CAPWing", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.Account");

                    b.ToTable("CAPWings");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldCheckbox", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.CustomAttendanceField");

                    b.Property<bool>("PreFill")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Checkbox");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldCheckboxValue", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldValue");

                    b.Property<bool>("Value")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("CustomAttendanceFieldCheckboxValue_Value");

                    b.HasDiscriminator().HasValue("Checkbox");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldDate", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.CustomAttendanceField");

                    b.Property<DateTime>("PreFill")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CustomAttendanceFieldDate_PreFill");

                    b.HasDiscriminator().HasValue("Date");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldDateValue", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldValue");

                    b.Property<DateTime>("Value")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CustomAttendanceFieldDateValue_Value");

                    b.HasDiscriminator().HasValue("Date");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldFiles", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.CustomAttendanceField");

                    b.HasDiscriminator().HasValue("Files");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldFilesValue", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldValue");

                    b.HasDiscriminator().HasValue("Files");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldNumber", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.CustomAttendanceField");

                    b.Property<double>("PreFill")
                        .HasColumnType("double")
                        .HasColumnName("CustomAttendanceFieldNumber_PreFill");

                    b.HasDiscriminator().HasValue("Number");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldNumberValue", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldValue");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("CustomAttendanceFieldNumberValue_Value");

                    b.HasDiscriminator().HasValue("Number");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldText", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.CustomAttendanceField");

                    b.Property<string>("PreFill")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CustomAttendanceFieldText_PreFill");

                    b.HasDiscriminator().HasValue("Text");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldTextValue", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldValue");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Text");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.EventEquipment", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.Equipment");

                    b.HasDiscriminator().HasValue("Event");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.ExternalPointOfContact", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.PointOfContact");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("PointsOfContact");

                    b.HasDiscriminator().HasValue("External");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.InternalPointOfContact", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.PointOfContact");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.HasIndex("MemberId");

                    b.ToTable("PointsOfContact");

                    b.HasDiscriminator().HasValue("Internal");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.LinkedEvent", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.CalendarEvent");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ParentId");

                    b.ToTable("EventsLinked");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.MemberNotification", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.Notification");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("char(36)");

                    b.HasIndex("MemberId");

                    b.HasDiscriminator().HasValue("Member");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.Member", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.Member");

                    b.Property<int>("CAPID")
                        .HasColumnType("int");

                    b.Property<string>("CdtWaiver")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Citizen")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateMod")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Ethnicity")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime>("Joined")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LSCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("MbrStatus")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("NameFirst")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("NameLast")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("NameMiddle")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("NameSuffix")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("ORGID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrgJoined")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PicDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PicStatus")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("RankDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("UsrID")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Wing")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.HasIndex("ORGID");

                    b.ToTable("NHQ_Member");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.RegularCalendarEvent", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.CalendarEvent");

                    b.ToTable("EventsRegular");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.SquadronEquipment", b =>
                {
                    b.HasBaseType("UnitPlanner.Apis.Main.Models.Equipment");

                    b.HasDiscriminator().HasValue("Squadron");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Account", b =>
                {
                    b.OwnsOne("UnitPlanner.Apis.Main.Models.AccountSettings", "Settings", b1 =>
                        {
                            b1.Property<string>("AccountId")
                                .HasColumnType("varchar(255)");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AccountDomain", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Account", "Unit")
                        .WithMany("Domains")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AccountOrganizationMapping", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.CAPGroup", null)
                        .WithMany("Organizations")
                        .HasForeignKey("CAPGroupId");

                    b.HasOne("UnitPlanner.Apis.Main.Models.CAPSquadron", null)
                        .WithMany("Organizations")
                        .HasForeignKey("CAPSquadronId");

                    b.HasOne("UnitPlanner.Apis.Main.Models.CAPWing", null)
                        .WithMany("Organizations")
                        .HasForeignKey("CAPWingId");

                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("ORGID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AttendanceApproval", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.AttendanceApprovalRequirement", "AttendanceApprovalRequirement")
                        .WithMany("AttendanceApprovals")
                        .HasForeignKey("AttendanceApprovalRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.Signature", "Signature")
                        .WithMany()
                        .HasForeignKey("SignatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.AttendanceRecord", "AttendanceRecord")
                        .WithMany("Approvals")
                        .HasForeignKey("AttendanceRecordEventId", "AttendanceRecordMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceApprovalRequirement");

                    b.Navigation("AttendanceRecord");

                    b.Navigation("Signature");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AttendanceApprovalRequirement", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.CalendarEvent", "CalendarEvent")
                        .WithMany()
                        .HasForeignKey("CalendarEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.AttendanceApprovalRequirement", "PreviousApprovalRequirement")
                        .WithMany()
                        .HasForeignKey("PreviousApprovalRequirementAttendanceApprovalRequirementId");

                    b.HasOne("UnitPlanner.Apis.Main.Models.RegularCalendarEvent", null)
                        .WithMany("AttendanceApprovalRequirements")
                        .HasForeignKey("RegularCalendarEventId");

                    b.Navigation("CalendarEvent");

                    b.Navigation("PreviousApprovalRequirement");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AttendanceRecord", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.CalendarEvent", "Event")
                        .WithMany("Attendance")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.Member", "Member")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Calendar", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Account", "Account")
                        .WithMany("Calendars")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CalendarEvent", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Member", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.Calendar", "Calendar")
                        .WithMany("Events")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceField", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.CalendarEvent", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.LinkedEvent", null)
                        .WithMany("ExtraCustomAttendanceFields")
                        .HasForeignKey("LinkedEventId");

                    b.HasOne("UnitPlanner.Apis.Main.Models.RegularCalendarEvent", null)
                        .WithMany("CustomAttendanceFields")
                        .HasForeignKey("RegularCalendarEventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldFileSubmission", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldFilesValue", null)
                        .WithMany("Submissions")
                        .HasForeignKey("CustomAttendanceFieldFilesValueAttendanceRecordEventId", "CustomAttendanceFieldFilesValueAttendanceRecordMemberId", "CustomAttendanceFieldFilesValueTitle");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldValue", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.AttendanceRecord", "AttendanceRecord")
                        .WithMany("CustomAttendanceFieldValues")
                        .HasForeignKey("AttendanceRecordEventId", "AttendanceRecordMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.CustomAttendanceField", "CustomAttendanceFieldRules")
                        .WithMany()
                        .HasForeignKey("AttendanceRecordEventId", "Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceRecord");

                    b.Navigation("CustomAttendanceFieldRules");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.DebriefItem", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.RegularCalendarEvent", "SourceEvent")
                        .WithMany("Debriefs")
                        .HasForeignKey("SourceEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("SourceEvent");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Equipment", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.LinkedEvent", null)
                        .WithMany("ExtraRequiredEquipment")
                        .HasForeignKey("LinkedEventId");

                    b.HasOne("UnitPlanner.Apis.Main.Models.RegularCalendarEvent", null)
                        .WithMany("RequiredEquipment")
                        .HasForeignKey("RegularCalendarEventId");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.ExtraAccountMembership", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Account", "Account")
                        .WithMany("ExtraAccountMembership")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.Member", "Member")
                        .WithMany("ExtraAccountMembership")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.CadetAchv", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.CadetHFZInformation", "CadetHFZInformation")
                        .WithMany()
                        .HasForeignKey("CadetHFZInformationHFZID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Member", "Member")
                        .WithMany("CadetAchv")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CadetHFZInformation");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.CadetAchvAprs", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Member", "Member")
                        .WithMany("CadetAchvAprs")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.CadetActivities", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Member", "Member")
                        .WithMany("Activities")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.CadetDutyPosition", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Member", "Member")
                        .WithMany("CadetDutyPositions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("ORGID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.CadetHFZInformation", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Member", "Member")
                        .WithMany("HFZInformation")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("ORGID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.DutyPosition", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Member", "Member")
                        .WithMany("DutyPositions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("ORGID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.MbrContact", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Member", "Member")
                        .WithMany("ContactInfo")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.OFlight", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Member", "Member")
                        .WithMany("OFlights")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.Organization", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Organization", "Parent")
                        .WithMany("SubordinateOrganizations")
                        .HasForeignKey("NextLevel");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Notification", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.NotificationData", "NotificationData")
                        .WithMany()
                        .HasForeignKey("NotificationDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationData");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.PointOfContact", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.CalendarEvent", null)
                        .WithMany("PointsOfContact")
                        .HasForeignKey("CalendarEventId");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Signature", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.TeamMembership", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Member", "Member")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AdminNotification", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Account", "Account")
                        .WithMany("AdminNotifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CAPActivity", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.CAPGroup", null)
                        .WithMany("Activities")
                        .HasForeignKey("CAPGroupId");

                    b.HasOne("UnitPlanner.Apis.Main.Models.CAPWing", null)
                        .WithMany("ActivityAccounts")
                        .HasForeignKey("CAPWingId");

                    b.HasOne("UnitPlanner.Apis.Main.Models.Account", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.Account", null)
                        .WithOne()
                        .HasForeignKey("UnitPlanner.Apis.Main.Models.CAPActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CAPGroup", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Account", null)
                        .WithOne()
                        .HasForeignKey("UnitPlanner.Apis.Main.Models.CAPGroup", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.CAPWing", "Wing")
                        .WithMany("Groups")
                        .HasForeignKey("WingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CAPSquadron", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.CAPGroup", "Group")
                        .WithMany("Squadrons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.Account", null)
                        .WithOne()
                        .HasForeignKey("UnitPlanner.Apis.Main.Models.CAPSquadron", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.CAPWing", "Wing")
                        .WithMany()
                        .HasForeignKey("WingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Wing");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CAPWing", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Account", null)
                        .WithOne()
                        .HasForeignKey("UnitPlanner.Apis.Main.Models.CAPWing", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.InternalPointOfContact", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.LinkedEvent", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.CalendarEvent", null)
                        .WithOne()
                        .HasForeignKey("UnitPlanner.Apis.Main.Models.LinkedEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.RegularCalendarEvent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("UnitPlanner.Apis.Main.Models.LinkedEventOverrideProperties", "OverridenProperties", b1 =>
                        {
                            b1.Property<Guid>("LinkedEventId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("AdministrationComments")
                                .HasColumnType("longtext");

                            b1.Property<bool?>("AllowShifts")
                                .HasColumnType("tinyint(1)");

                            b1.Property<int?>("AttendanceViewOptions")
                                .HasColumnType("int");

                            b1.Property<bool?>("Complete")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("Description")
                                .HasColumnType("longtext");

                            b1.Property<int?>("DesiredNumberOfParticipants")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("EndDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("EventLocation")
                                .HasColumnType("longtext");

                            b1.Property<string>("ExternalEventWebsite")
                                .HasColumnType("longtext");

                            b1.Property<string>("HighAdventureDescription")
                                .HasColumnType("longtext");

                            b1.Property<string>("MeetLocation")
                                .HasColumnType("longtext");

                            b1.Property<string>("MemberDescription")
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .HasColumnType("longtext");

                            b1.Property<string>("PickupLocation")
                                .HasColumnType("longtext");

                            b1.Property<bool?>("ShowOnMainPageAsUpcoming")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("SignupDenyMessage")
                                .HasColumnType("longtext");

                            b1.Property<DateTime?>("StartDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<int?>("Status")
                                .HasColumnType("int");

                            b1.Property<string>("Subtitle")
                                .HasColumnType("longtext");

                            b1.Property<string>("TransportationDescription")
                                .HasColumnType("longtext");

                            b1.HasKey("LinkedEventId");

                            b1.ToTable("EventsLinked");

                            b1.WithOwner()
                                .HasForeignKey("LinkedEventId");

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.ActivityDescription", "ActivityDescription", b2 =>
                                {
                                    b2.Property<Guid>("LinkedEventOverridePropertiesLinkedEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<bool>("Backcountry")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("ClassroomTourLight")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("Flying")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("PhysicallyRigorous")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("SquadronMeeting")
                                        .HasColumnType("tinyint(1)");

                                    b2.HasKey("LinkedEventOverridePropertiesLinkedEventId");

                                    b2.ToTable("EventsLinked");

                                    b2.WithOwner()
                                        .HasForeignKey("LinkedEventOverridePropertiesLinkedEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.EmailSignupInformation", "EmailInformation", b2 =>
                                {
                                    b2.Property<Guid>("LinkedEventOverridePropertiesLinkedEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<string>("Body")
                                        .IsRequired()
                                        .HasColumnType("longtext");

                                    b2.HasKey("LinkedEventOverridePropertiesLinkedEventId");

                                    b2.ToTable("EventsLinked");

                                    b2.WithOwner()
                                        .HasForeignKey("LinkedEventOverridePropertiesLinkedEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.LodgingArrangementInformation", "LodgingArrangements", b2 =>
                                {
                                    b2.Property<Guid>("LinkedEventOverridePropertiesLinkedEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<bool>("HotelOrIndividualRoom")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("IndividualTent")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("LargeTent")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("OpenBayBuilding")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<string>("Other")
                                        .HasColumnType("longtext");

                                    b2.HasKey("LinkedEventOverridePropertiesLinkedEventId");

                                    b2.ToTable("EventsLinked");

                                    b2.WithOwner()
                                        .HasForeignKey("LinkedEventOverridePropertiesLinkedEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.MealsInformation", "Meals", b2 =>
                                {
                                    b2.Property<Guid>("LinkedEventOverridePropertiesLinkedEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<bool>("BringMoney")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("BringOwnFood")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("MealsProvided")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("NoMeals")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<string>("Other")
                                        .HasColumnType("longtext");

                                    b2.HasKey("LinkedEventOverridePropertiesLinkedEventId");

                                    b2.ToTable("EventsLinked");

                                    b2.WithOwner()
                                        .HasForeignKey("LinkedEventOverridePropertiesLinkedEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.ParticipationFeeInformation", "ParticipationFee", b2 =>
                                {
                                    b2.Property<Guid>("LinkedEventOverridePropertiesLinkedEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<DateTime>("FeeDeadline")
                                        .HasColumnType("datetime(6)");

                                    b2.Property<double>("FeeDue")
                                        .HasColumnType("double");

                                    b2.HasKey("LinkedEventOverridePropertiesLinkedEventId");

                                    b2.ToTable("EventsLinked");

                                    b2.WithOwner()
                                        .HasForeignKey("LinkedEventOverridePropertiesLinkedEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.RegistrationDeadlineInformation", "RegistrationDeadline", b2 =>
                                {
                                    b2.Property<Guid>("LinkedEventOverridePropertiesLinkedEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<string>("DeadlineInformation")
                                        .IsRequired()
                                        .HasColumnType("longtext");

                                    b2.Property<DateTime>("RegistrationDeadline")
                                        .HasColumnType("datetime(6)");

                                    b2.HasKey("LinkedEventOverridePropertiesLinkedEventId");

                                    b2.ToTable("EventsLinked");

                                    b2.WithOwner()
                                        .HasForeignKey("LinkedEventOverridePropertiesLinkedEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.RequiredForms", "RequiredForms", b2 =>
                                {
                                    b2.Property<Guid>("LinkedEventOverridePropertiesLinkedEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<bool>("CAPF101")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("CAPF160")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("CAPF161")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("CAPF163")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("CAPF31")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("CAPF6080")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("CAPIDCard")
                                        .HasColumnType("tinyint(1)");

                                    b2.HasKey("LinkedEventOverridePropertiesLinkedEventId");

                                    b2.ToTable("EventsLinked");

                                    b2.WithOwner()
                                        .HasForeignKey("LinkedEventOverridePropertiesLinkedEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.TeamInformation", "TeamInformation", b2 =>
                                {
                                    b2.Property<Guid>("LinkedEventOverridePropertiesLinkedEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<bool>("LimitSignupsToTeamMembers")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<Guid>("TeamId")
                                        .HasColumnType("char(36)");

                                    b2.HasKey("LinkedEventOverridePropertiesLinkedEventId");

                                    b2.HasIndex("TeamId");

                                    b2.ToTable("EventsLinked");

                                    b2.WithOwner()
                                        .HasForeignKey("LinkedEventOverridePropertiesLinkedEventId");

                                    b2.HasOne("UnitPlanner.Apis.Main.Models.Team", "Team")
                                        .WithMany()
                                        .HasForeignKey("TeamId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.Navigation("Team");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.UniformSelection", "Uniform", b2 =>
                                {
                                    b2.Property<Guid>("LinkedEventOverridePropertiesLinkedEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<bool>("AirmanBattleUniform")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("BlueUtilities")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("Civies")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("DressBlueA")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("DressBlueB")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("FlightSuit")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("NotApplicable")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("PTGear")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("PoloShirts")
                                        .HasColumnType("tinyint(1)");

                                    b2.HasKey("LinkedEventOverridePropertiesLinkedEventId");

                                    b2.ToTable("EventsLinked");

                                    b2.WithOwner()
                                        .HasForeignKey("LinkedEventOverridePropertiesLinkedEventId");
                                });

                            b1.Navigation("ActivityDescription");

                            b1.Navigation("EmailInformation");

                            b1.Navigation("LodgingArrangements");

                            b1.Navigation("Meals");

                            b1.Navigation("ParticipationFee");

                            b1.Navigation("RegistrationDeadline");

                            b1.Navigation("RequiredForms");

                            b1.Navigation("TeamInformation");

                            b1.Navigation("Uniform");
                        });

                    b.Navigation("OverridenProperties")
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.MemberNotification", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Member", "Member")
                        .WithMany("Notifications")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.Member", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.Member", null)
                        .WithOne()
                        .HasForeignKey("UnitPlanner.Apis.Main.Models.NHQ.Member", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitPlanner.Apis.Main.Models.NHQ.Organization", "Organization")
                        .WithMany("Members")
                        .HasForeignKey("ORGID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.RegularCalendarEvent", b =>
                {
                    b.HasOne("UnitPlanner.Apis.Main.Models.CalendarEvent", null)
                        .WithOne()
                        .HasForeignKey("UnitPlanner.Apis.Main.Models.RegularCalendarEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("UnitPlanner.Apis.Main.Models.EventDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("RegularCalendarEventId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("AdministrationComments")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<bool>("AllowShifts")
                                .HasColumnType("tinyint(1)");

                            b1.Property<int>("AttendanceViewOptions")
                                .HasColumnType("int");

                            b1.Property<bool>("Complete")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<int>("DesiredNumberOfParticipants")
                                .HasColumnType("int");

                            b1.Property<DateTime>("EndDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("EventLocation")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("ExternalEventWebsite")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("HighAdventureDescription")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("MeetLocation")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("MemberDescription")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PickupLocation")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<bool>("ShowOnMainPageAsUpcoming")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("SignupDenyMessage")
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("StartDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<int>("Status")
                                .HasColumnType("int");

                            b1.Property<string>("Subtitle")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("TransportationDescription")
                                .HasColumnType("longtext");

                            b1.HasKey("RegularCalendarEventId");

                            b1.ToTable("EventsRegular");

                            b1.WithOwner()
                                .HasForeignKey("RegularCalendarEventId");

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.ActivityDescription", "ActivityDescription", b2 =>
                                {
                                    b2.Property<Guid>("EventDetailsRegularCalendarEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<bool>("Backcountry")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("ClassroomTourLight")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("Flying")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("PhysicallyRigorous")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("SquadronMeeting")
                                        .HasColumnType("tinyint(1)");

                                    b2.HasKey("EventDetailsRegularCalendarEventId");

                                    b2.ToTable("EventsRegular");

                                    b2.WithOwner()
                                        .HasForeignKey("EventDetailsRegularCalendarEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.EmailSignupInformation", "EmailInformation", b2 =>
                                {
                                    b2.Property<Guid>("EventDetailsRegularCalendarEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<string>("Body")
                                        .IsRequired()
                                        .HasColumnType("longtext");

                                    b2.HasKey("EventDetailsRegularCalendarEventId");

                                    b2.ToTable("EventsRegular");

                                    b2.WithOwner()
                                        .HasForeignKey("EventDetailsRegularCalendarEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.LodgingArrangementInformation", "LodgingArrangements", b2 =>
                                {
                                    b2.Property<Guid>("EventDetailsRegularCalendarEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<bool>("HotelOrIndividualRoom")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("IndividualTent")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("LargeTent")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("OpenBayBuilding")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<string>("Other")
                                        .HasColumnType("longtext");

                                    b2.HasKey("EventDetailsRegularCalendarEventId");

                                    b2.ToTable("EventsRegular");

                                    b2.WithOwner()
                                        .HasForeignKey("EventDetailsRegularCalendarEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.MealsInformation", "Meals", b2 =>
                                {
                                    b2.Property<Guid>("EventDetailsRegularCalendarEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<bool>("BringMoney")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("BringOwnFood")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("MealsProvided")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("NoMeals")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<string>("Other")
                                        .HasColumnType("longtext");

                                    b2.HasKey("EventDetailsRegularCalendarEventId");

                                    b2.ToTable("EventsRegular");

                                    b2.WithOwner()
                                        .HasForeignKey("EventDetailsRegularCalendarEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.ParticipationFeeInformation", "ParticipationFee", b2 =>
                                {
                                    b2.Property<Guid>("EventDetailsRegularCalendarEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<DateTime>("FeeDeadline")
                                        .HasColumnType("datetime(6)");

                                    b2.Property<double>("FeeDue")
                                        .HasColumnType("double");

                                    b2.HasKey("EventDetailsRegularCalendarEventId");

                                    b2.ToTable("EventsRegular");

                                    b2.WithOwner()
                                        .HasForeignKey("EventDetailsRegularCalendarEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.RegistrationDeadlineInformation", "RegistrationDeadline", b2 =>
                                {
                                    b2.Property<Guid>("EventDetailsRegularCalendarEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<string>("DeadlineInformation")
                                        .IsRequired()
                                        .HasColumnType("longtext");

                                    b2.Property<DateTime>("RegistrationDeadline")
                                        .HasColumnType("datetime(6)");

                                    b2.HasKey("EventDetailsRegularCalendarEventId");

                                    b2.ToTable("EventsRegular");

                                    b2.WithOwner()
                                        .HasForeignKey("EventDetailsRegularCalendarEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.RequiredForms", "RequiredForms", b2 =>
                                {
                                    b2.Property<Guid>("EventDetailsRegularCalendarEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<bool>("CAPF101")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("CAPF160")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("CAPF161")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("CAPF163")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("CAPF31")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("CAPF6080")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("CAPIDCard")
                                        .HasColumnType("tinyint(1)");

                                    b2.HasKey("EventDetailsRegularCalendarEventId");

                                    b2.ToTable("EventsRegular");

                                    b2.WithOwner()
                                        .HasForeignKey("EventDetailsRegularCalendarEventId");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.TeamInformation", "TeamInformation", b2 =>
                                {
                                    b2.Property<Guid>("EventDetailsRegularCalendarEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<bool>("LimitSignupsToTeamMembers")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<Guid>("TeamId")
                                        .HasColumnType("char(36)");

                                    b2.HasKey("EventDetailsRegularCalendarEventId");

                                    b2.HasIndex("TeamId");

                                    b2.ToTable("EventsRegular");

                                    b2.WithOwner()
                                        .HasForeignKey("EventDetailsRegularCalendarEventId");

                                    b2.HasOne("UnitPlanner.Apis.Main.Models.Team", "Team")
                                        .WithMany()
                                        .HasForeignKey("TeamId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.Navigation("Team");
                                });

                            b1.OwnsOne("UnitPlanner.Apis.Main.Models.UniformSelection", "Uniform", b2 =>
                                {
                                    b2.Property<Guid>("EventDetailsRegularCalendarEventId")
                                        .HasColumnType("char(36)");

                                    b2.Property<bool>("AirmanBattleUniform")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("BlueUtilities")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("Civies")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("DressBlueA")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("DressBlueB")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("FlightSuit")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("NotApplicable")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("PTGear")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("PoloShirts")
                                        .HasColumnType("tinyint(1)");

                                    b2.HasKey("EventDetailsRegularCalendarEventId");

                                    b2.ToTable("EventsRegular");

                                    b2.WithOwner()
                                        .HasForeignKey("EventDetailsRegularCalendarEventId");
                                });

                            b1.Navigation("ActivityDescription")
                                .IsRequired();

                            b1.Navigation("EmailInformation");

                            b1.Navigation("LodgingArrangements")
                                .IsRequired();

                            b1.Navigation("Meals")
                                .IsRequired();

                            b1.Navigation("ParticipationFee");

                            b1.Navigation("RegistrationDeadline");

                            b1.Navigation("RequiredForms")
                                .IsRequired();

                            b1.Navigation("TeamInformation");

                            b1.Navigation("Uniform")
                                .IsRequired();
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Account", b =>
                {
                    b.Navigation("AdminNotifications");

                    b.Navigation("Calendars");

                    b.Navigation("Domains");

                    b.Navigation("ExtraAccountMembership");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AttendanceApprovalRequirement", b =>
                {
                    b.Navigation("AttendanceApprovals");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.AttendanceRecord", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("CustomAttendanceFieldValues");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Calendar", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CalendarEvent", b =>
                {
                    b.Navigation("Attendance");

                    b.Navigation("PointsOfContact");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Member", b =>
                {
                    b.Navigation("AttendanceRecords");

                    b.Navigation("ExtraAccountMembership");

                    b.Navigation("Notifications");

                    b.Navigation("TeamMemberships");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.Organization", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("SubordinateOrganizations");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CAPGroup", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Organizations");

                    b.Navigation("Squadrons");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CAPSquadron", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CAPWing", b =>
                {
                    b.Navigation("ActivityAccounts");

                    b.Navigation("Groups");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.CustomAttendanceFieldFilesValue", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.LinkedEvent", b =>
                {
                    b.Navigation("ExtraCustomAttendanceFields");

                    b.Navigation("ExtraRequiredEquipment");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.NHQ.Member", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("CadetAchv");

                    b.Navigation("CadetAchvAprs");

                    b.Navigation("CadetDutyPositions");

                    b.Navigation("ContactInfo");

                    b.Navigation("DutyPositions");

                    b.Navigation("HFZInformation");

                    b.Navigation("OFlights");
                });

            modelBuilder.Entity("UnitPlanner.Apis.Main.Models.RegularCalendarEvent", b =>
                {
                    b.Navigation("AttendanceApprovalRequirements");

                    b.Navigation("CustomAttendanceFields");

                    b.Navigation("Debriefs");

                    b.Navigation("RequiredEquipment");
                });
#pragma warning restore 612, 618
        }
    }
}
