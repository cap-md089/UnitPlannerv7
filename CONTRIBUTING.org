#+TITLE: Contributing to Unit Planner

* Getting set to develop UnitPlanner v7
The following steps should be all you need to get a working development environment for UnitPlanner:

1. Configure VS Code
   1. Install the [[https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers][Remote - Containers]] extension (extension ID ~ms-vscode-remote.remote-containers~)
   2. Reopen the repository using the Remote Containers extension. There should be a prompt asking to do so
   3. Wait for the terminal in the bottom window to say "Press any key to close this terminal"
2. Configure Kubernetes
   1. Create a new terminal, and run ~scripts/dev-create-resources.sh -a~
3. Configure F#
   1. Bring up the command pallette (~Ctrl-Shift-P~ or ~Cmd-Shift-P~)
   2. Run ~F#: Change workspace or solution~
   3. Select ~/workspaces/UnitPlannerv7~

** Developing
To start the development environment for UnitPlannerv7, open a terminal /inside VS Code/ and run the command ~skaffold dev~.

To start a development environment for different backend services, enable the different profiles with ~skaffold dev~ by running ~skaffold dev -p [PROFILE_NAME]~, where ~[PROFILE_NAME]~ is one of ~authentication-dev~, ~capwatch-dev~, ~files-dev~, or ~graph-dev~.

To enable the base API to actually call the backend services, run ~kubectl edit configmap base-api-env~ and change the specific values from 0 to 1 in order to use the specified backend
* Application architecture
** Apis
*** [[./Apis/Main/README.org][Main]]
** [[./Client/README.org][Client]]
** Common
*** [[./Common/Authentication/README.org][Authentication]]
** Services
*** [[./Services/Authentication/README.org][Authentication]]
*** [[./Services/Capwatch/README.org][Capwatch]]
*** [[./Services/Files/README.org][Files]]
*** [[./Services/Graph/README.org][Graph]]
*** [[./Services/HostConfiguration/README.org][Host Configuration]]

* Testing
** Unit tests
Unit tests can be run with either ~dotnet test~, either in the project root or in the individual .NET project folders

** Integration tests
First, ~skaffold dev~ cannot be running; it has to be replaced with ~skaffold dev -p test,-dev~ to create the test environment.

Actually bringing up the test runner is based on the host environment. For Linux, go to the host computer and run ~scripts/run-integration-test-runner-linux.sh~. For Windows, ensure VcXsrv is installed and configured to run on display 0 and with unauthenticated access allowed. Then, in the VS Code terminal run ~scripts/run-integration-test-runner-windows.sh~.

You can then run any specific test suite, or run all the integration tests by clicking on the test suite or the 'Run all' button.
** Pull request
Pull requests must have appropriate tests written to cover any new code
