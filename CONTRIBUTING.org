#+TITLE: Contributing to Unit Planner

* Getting set to develop UnitPlanner v7
The development process for UnitPlanner v7 has been greatly simplified when compared to EvMPlus v6. Now, it should be possible to just download the repository and have Docker installed, and get up and running using [[./docker-compose.yml][docker-compose.yml]]. Check out the architecture guide below, as well as looking at the individual READMEs to see how to get started with developing UnitPlanner.

The simplest way to get set up is to run ~docker-compose up -d client_proxy~ and then browse to [[http://localhost][localhost]], and browse to src/Main.elm. Any code change made to any of the services or APIs will be automatically applied, but the client will have to be refreshed to see changes.

* Application architecture
** Apis
*** [[./Apis/Main/README.org][Main]]
** [[./Client/README.org][Client]]
** Common
*** [[./Common/Authentication/README.org][Authentication]]
*** [[./Common/Models/README.org][Models]]
** Services
*** [[./Services/Authentication/README.org][Authentication]]
*** [[./Services/Capwatch/README.org][Capwatch]]
*** [[./Services/Files/README.org][Files]]
*** [[./Services/Graph/README.org][Graph]]

* Testing
** Unit tests
Unit tests can be run with either ~dotnet test~ or if using Docker ~docker-compose run watch_[TEST_NAME]_tests~ where ~[TEST_NAME]~ is one of ~client~, ~api_server~, ~auth_service~, ~capwatch_service~, ~files_service~, or ~graph_service~.

** Integration tests
*Do note: Running integration tests runs on the same database as the development environment, and will clear the database everytime it is run*

There are three main integration test suites, for two main different pages and the elm reactor. There are also two different ways to run each test suite, either with a GUI (if developing on Linux) or from the command line.

To run an integration test suite from the command line, run ~docker-compose run cypress_tests_[SUITE_NAME]~, where ~[SUITE_NAME]~ is one of ~client~, ~webmaster_dashboard~, or ~reactor~.

To run the GUI, run ~docker-compose up -d cypress_test_runner_[SUITE_NAME]_linux~ with the same ~[SUITE_NAME]~ options as above.

** Pull request
Pull requests must have appropriate tests written to cover any new code